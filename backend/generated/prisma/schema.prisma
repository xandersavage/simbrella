// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  phoneNumber String?
  password    String // Hashed password
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  wallets      Wallet[]
  transactions Transaction[]
  logs         Log[]

  @@map("users")
}

model Wallet {
  id        String     @id @default(cuid())
  name      String // "My Personal Wallet", "Business Account", etc.
  type      WalletType @default(PERSONAL)
  balance   Decimal    @default(0) @db.Decimal(15, 2)
  currency  String     @default("NGN")
  isActive  Boolean    @default(true)
  userId    String?
  serviceId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  service          Service?      @relation("ServiceOwnedWallets", fields: [serviceId], references: [id])
  transactionsFrom Transaction[] @relation("FromWallet")
  transactionsTo   Transaction[] @relation("ToWallet")
  logs             Log[]

  @@map("wallets")
}

model Service {
  id          String      @id @default(cuid())
  name        String      @unique // e.g., "MTN Airtime", "Ikeja Electric"
  type        ServiceType @default(AIRTIME)
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // A service can own multiple system wallets
  systemWallets Wallet[] @relation("ServiceOwnedWallets")

  @@map("services")
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Decimal           @db.Decimal(15, 2)
  description String?
  reference   String            @unique // For tracking and reconciliation
  status      TransactionStatus @default(PENDING)

  // Double-entry fields
  fromWalletId String?
  toWalletId   String?

  // Service payment fields
  serviceType     ServiceType?
  serviceProvider String?
  serviceDetails  Json? // For storing service-specific data

  // Metadata
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user       User    @relation(fields: [userId], references: [id])
  fromWallet Wallet? @relation("FromWallet", fields: [fromWalletId], references: [id])
  toWallet   Wallet? @relation("ToWallet", fields: [toWalletId], references: [id])
  logs       Log[]

  @@map("transactions")
}

model Log {
  id            String   @id @default(cuid())
  action        String // "wallet_transfer", "airtime_payment", "wallet_created", etc.
  details       Json // Store relevant data as JSON
  userId        String?
  walletId      String?
  transactionId String?
  createdAt     DateTime @default(now())

  // Relationships
  user        User?        @relation(fields: [userId], references: [id])
  wallet      Wallet?      @relation(fields: [walletId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@map("logs")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum WalletType {
  SYSTEM
  PERSONAL
  BUSINESS
  SAVINGS
}

enum TransactionType {
  WALLET_TRANSFER
  WALLET_FUNDING // When adding money to wallet
  SERVICE_PAYMENT // Airtime, data, bills
  WITHDRAWAL // When removing money from system
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

enum ServiceType {
  AIRTIME
  DATA
  ELECTRICITY
  WATER
  CABLE_TV
}
